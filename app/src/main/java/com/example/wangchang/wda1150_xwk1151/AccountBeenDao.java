package com.example.wangchang.wda1150_xwk1151;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wangchang.wda1150_xwk1151.Been.AccountBeen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_BEEN".
*/
public class AccountBeenDao extends AbstractDao<AccountBeen, Long> {

    public static final String TABLENAME = "ACCOUNT_BEEN";

    /**
     * Properties of entity AccountBeen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Money = new Property(3, Float.class, "money", false, "MONEY");
        public final static Property Month = new Property(4, String.class, "month", false, "MONTH");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Introduce = new Property(6, String.class, "introduce", false, "INTRODUCE");
    }


    public AccountBeenDao(DaoConfig config) {
        super(config);
    }
    
    public AccountBeenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_BEEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"MONEY\" REAL," + // 3: money
                "\"MONTH\" TEXT," + // 4: month
                "\"DATE\" TEXT," + // 5: date
                "\"INTRODUCE\" TEXT);"); // 6: introduce
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_BEEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountBeen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Float money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(4, money);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(5, month);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(7, introduce);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountBeen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Float money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(4, money);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(5, month);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(7, introduce);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AccountBeen readEntity(Cursor cursor, int offset) {
        AccountBeen entity = new AccountBeen( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // month
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // introduce
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountBeen entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setMonth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntroduce(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountBeen entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountBeen entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountBeen entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
