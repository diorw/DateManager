package com.example.wangchang.testbottomnavigationbar;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wangchang.testbottomnavigationbar.Been.TaskBeen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_BEEN".
*/
public class TaskBeenDao extends AbstractDao<TaskBeen, Long> {

    public static final String TABLENAME = "TASK_BEEN";

    /**
     * Properties of entity TaskBeen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property StartTime = new Property(2, String.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "EndTime", false, "END_TIME");
        public final static Property Description = new Property(4, String.class, "Description", false, "DESCRIPTION");
        public final static Property IsCompleted = new Property(5, Boolean.class, "isCompleted", false, "IS_COMPLETED");
        public final static Property RemindTime = new Property(6, Boolean.class, "RemindTime", false, "REMIND_TIME");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
    }


    public TaskBeenDao(DaoConfig config) {
        super(config);
    }
    
    public TaskBeenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_BEEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: Id
                "\"DATE\" TEXT NOT NULL ," + // 1: date
                "\"START_TIME\" TEXT," + // 2: StartTime
                "\"END_TIME\" TEXT," + // 3: EndTime
                "\"DESCRIPTION\" TEXT," + // 4: Description
                "\"IS_COMPLETED\" INTEGER," + // 5: isCompleted
                "\"REMIND_TIME\" INTEGER," + // 6: RemindTime
                "\"TITLE\" TEXT NOT NULL );"); // 7: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_BEEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskBeen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDate());
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(3, StartTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(5, Description);
        }
 
        Boolean isCompleted = entity.getIsCompleted();
        if (isCompleted != null) {
            stmt.bindLong(6, isCompleted ? 1L: 0L);
        }
 
        Boolean RemindTime = entity.getRemindTime();
        if (RemindTime != null) {
            stmt.bindLong(7, RemindTime ? 1L: 0L);
        }
        stmt.bindString(8, entity.getTitle());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskBeen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDate());
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(3, StartTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(5, Description);
        }
 
        Boolean isCompleted = entity.getIsCompleted();
        if (isCompleted != null) {
            stmt.bindLong(6, isCompleted ? 1L: 0L);
        }
 
        Boolean RemindTime = entity.getRemindTime();
        if (RemindTime != null) {
            stmt.bindLong(7, RemindTime ? 1L: 0L);
        }
        stmt.bindString(8, entity.getTitle());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TaskBeen readEntity(Cursor cursor, int offset) {
        TaskBeen entity = new TaskBeen( //
            cursor.getLong(offset + 0), // Id
            cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StartTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EndTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Description
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isCompleted
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // RemindTime
            cursor.getString(offset + 7) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskBeen entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDate(cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsCompleted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRemindTime(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setTitle(cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskBeen entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskBeen entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskBeen entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
